paths:
  # GET

  /testimonials:
    get:
      security:
      - bearerAuth: []  
      tags:
        - Testimonials
      summary: "will return a list of existing testimonials"
      description: "service to retrive all testimonials"
      responses:
        200:
          $ref: "#/components/responses/getAllTestimonials"
        204:
          $ref: "#/components/responses/noTestimonyFound"
        403:
          $ref: "#/components/responses/unauthorizedError"
        500:
          $ref: "#/components/responses/ServerError"
    
    post:
      security:
      - bearerAuth: []  
      tags:
        - Testimonials
      summary: "will add a new testimony to DB"
      description: "add a new testimony to DB"
      requestBody:
        description: "request with values"
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Testimony-formdata"  
      responses:
        201:
          $ref: "#/components/responses/testimonyCreatedSuccessfully"
        422:
          $ref: "#/components/responses/createdValidationError"
        500:
          $ref: "#/components/responses/ServerError"

  # PUT
  
  /testimonials/{id}:
    put:
      security:
      - bearerAuth: []  
      tags:
        - Testimonials
      summary: "update an existing testimony by provinding the correct id"
      description: "this endpoint is in charge of making an update of the selected testimony"
      parameters:
        - in: path
          name: id
          description: "the id of the testimony that needs to be updated"
          required: true
          schema:
            type: integer
            example: 5
      requestBody:
        description: "request with values"
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Testimony-formdata"  
      responses:
        200:
          $ref: "#/components/responses/updatedSuccessfully"
        404:
          $ref: "#/components/responses/testimonyNotFound"
        500:
          $ref: "#/components/responses/ServerError"

    get:
      security:
      - bearerAuth: []  
      tags:
        - Testimonials
      summary: "Returns the testimony that corresponds with the selected id"
      description: "This endpoing will return the testimony that corresponds with the choosen id"
      parameters:
        - in: path
          name: id
          description: "the id of the testimony you want to see"
          required: true
          schema:
            type: integer
            example: 3
      responses:
        200:
          $ref: "#/components/responses/getTestimonyById"
        404:
          $ref: "#/components/responses/testimonyNotFound"
        500:
          $ref: "#/components/responses/ServerError"

    delete:
      security:
      - bearerAuth: []  
      tags:
        - Testimonials
      summary: "Delete testimony"
      description: "This endpoing will delete the testimony that corresponds with the choosen id"
      parameters:
        - in: path
          name: id
          description: "the id of the testimony you want to delete"
          required: true
          schema:
            type: integer
            example: 6
      responses:
        200:
          $ref: "#/components/responses/testimonyDeletedSuccessfully"
        404:
          $ref: "#/components/responses/testimonyNotFound"
        500:
          $ref: "#/components/responses/ServerError"

  # COMPONENTS

components:

  # SCHEMAS
  schemas:
  
    Testimony-formdata:
      type: object
      properties:
        name:
          type: string
        content:
          type: string
        image:
          type: string
          format: base64
      # required:
      #   - name
      #   - content

    testimony:
      properties:
        name:
          description: "name of the testimony"
          type: string
          example: "We help to others"        
        content:
          description: "Content of the testimony"
          type: string
          example: "I am a people pleaser. My mission in life was to try to fit in and belong. For example, at school, Idesperately wanted to be accepted by my classmates, so I would try to say the right things and do the right things so that they would like me."
        image:
          type: string
          example: "https://www.lluiscodina.com/wp-content/uploads/2019/05/navegacion-taxonomias-sitio-web.png"

  # Responses

  responses:
    # Verb POST ( testimony - responses )
    testimonyCreatedSuccessfully:
      description: "Testimony created succesfully"
      content:
        application/json:
          schema:
            properties:
              meta:
                type: object
                properties:
                  status:
                    type: number
                    example: 201
                  ok:
                    type: boolean
                    example: true
              data:
                type: object
                properties:
                  id: 
                    type: integer
                    example: 23
                  name: 
                    type: string
                    example: Testimony name
                  content: 
                    type: string
                    example: contenido del testimonio
                  image: 
                    type: string
                    example: https://www.designevo.com/res/templates/thumb_small/colorful-hand-and-warm-community.png
                  updatedAt: 
                    type: string
                    example: 2022-03-28T00:05:14.010Z
                  createdAt: 
                    type: string
                    example: 2022-03-28T00:05:14.010Z

    createdValidationError:
      description: "Validation errors"
      content:
        application/json:
          schema:
            type: object
            properties:
              meta:
                type: object
                properties:
                  status:
                    type: number
                    example: 422
                  ok:
                    example: false
              data:
                example: null
              errors:
                type: object
                properties:
                  name:
                    type: object
                    properties:
                      value:
                        type: string
                        example: "Tut"
                      msg:
                        type: string
                        example: "String must be more than 4 characters"
                  content:
                    msg:
                      type: string
                      example: Input "required"

    ServerError:
      description: "Server error"
      content:
        application/json:
          schema:
            type: object
            example:
              {
                meta: { status: 503, ok: "false" },
                data: null,
                errors: { msg: "Server no disponible" },
              }

    # Verb put ( Member - responses )
    updatedSuccessfully:
      description: "Updated succesfully"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Testimony updated successfully"
              data:
                type: object
                properties:
                  name:
                    type: string
                    example: "recreation"
                  image:
                    type: string
                    example: "https://s3.sa-east-1.amazonaws.com/ong.somos.mas/166090082-testimony-symbol-white-circles-with-the-word-testimony-beautiful-wooden-background-business-testimon%20%281%29.webp"
                  content:
                    type: string
                    example: "Come and play with the kids"
    
    testimonyNotFound:
      description: "Testimony not found"
      content:
        application/json:
          schema:
            type: object
            properties:
              ok:
                type: boolean
                example: false
              message:
                type: string
                example: "Testimony not found"

    getAllTestimonials:
      description: "It shows a list with all the testimonials"
      # example:
      #   $ref: "#/components/examples/getAllTestimonials"
      content:
        application/json:
          schema:
            type: object
            properties:
              prev:
                type: string
                example: null
              next:
                type: string
                example: http://localhost:3000/testimonials?page=2
              results:
                example: [ { "id": 12, "name": "Testimony 1", "image": "https://www.designevo.com/res/templates/thumb_small/colorful-hand-and-warm-community.png", "content": "content example", "createdAt": "2022-03-27T22:55:48.000Z", "updatedAt": "2022-03-27T22:55:48.000Z" }, { "id": 13, "name": "Testimony 2", "image": "https://www.designevo.com/res/templates/thumb_small/colorful-hand-and-warm-community.png", "content": "content example", "createdAt": "2022-03-27T22:55:48.000Z", "updatedAt": "2022-03-27T22:55:48.000Z" }, { "id": 14, "name": "Testimony 3", "image": "https://www.designevo.com/res/templates/thumb_small/colorful-hand-and-warm-community.png", "content": "content example", "createdAt": "2022-03-27T22:55:48.000Z", "updatedAt": "2022-03-27T22:55:48.000Z" }, { "id": 15, "name": "Testimony 4", "image": "https://www.designevo.com/res/templates/thumb_small/colorful-hand-and-warm-community.png", "content": "content example", "createdAt": "2022-03-27T22:55:48.000Z", "updatedAt": "2022-03-27T22:55:48.000Z" }, { "id": 16, "name": "Testimony 5", "image": "https://www.designevo.com/res/templates/thumb_small/colorful-hand-and-warm-community.png", "content": "content example", "createdAt": "2022-03-27T22:55:48.000Z", "updatedAt": "2022-03-27T22:55:48.000Z" }, { "id": 17, "name": "Testimony 6", "image": "https://www.designevo.com/res/templates/thumb_small/colorful-hand-and-warm-community.png", "content": "content example", "createdAt": "2022-03-27T22:55:48.000Z", "updatedAt": "2022-03-27T22:55:48.000Z" }, { "id": 18, "name": "Testimony 7", "image": "https://www.designevo.com/res/templates/thumb_small/colorful-hand-and-warm-community.png", "content": "content example", "createdAt": "2022-03-27T22:55:48.000Z", "updatedAt": "2022-03-27T22:55:48.000Z" }, { "id": 19, "name": "Testimony 8", "image": "https://www.designevo.com/res/templates/thumb_small/colorful-hand-and-warm-community.png", "content": "content example", "createdAt": "2022-03-27T22:55:48.000Z", "updatedAt": "2022-03-27T22:55:48.000Z" }, { "id": 20, "name": "Testimony 9", "image": "https://www.designevo.com/res/templates/thumb_small/colorful-hand-and-warm-community.png", "content": "content example", "createdAt": "2022-03-27T22:55:48.000Z", "updatedAt": "2022-03-27T22:55:48.000Z" }, { "id": 21, "name": "Testimony 10", "image": "https://www.designevo.com/res/templates/thumb_small/colorful-hand-and-warm-community.png", "content": "content example", "createdAt": "2022-03-27T22:55:48.000Z", "updatedAt": "2022-03-27T22:55:48.000Z" } ]
                
    noTestimonyFound:
      description: "Is not possible to return any testimony as there are no testimony created"
      content:
        application/json::
          schema:
            type: object
            properties:
              ok:
                type: boolean
                example: false
              messege:
                type: string
                example: "Testimony not found"

    unauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: A token is required for authentication

    # Verb get ( MemberById - responses )
    getTestimonyById:
      description: "Testimony chosen by id"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/testimony"
    # verb delete (Member delete - responses)
    testimonyDeletedSuccessfully:
      description: "Deleted succesfully"
      content:
        application/json:
          schema:
            type: object
            properties:
              ok:
                type: boolean
                example: true
              message:
                type: string
                example: "Testimony deleted successfully."