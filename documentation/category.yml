paths:
  # POST
  /categories:
    post:
      tags:
        - Categories
      summary: "add a new category to DB"
      requestBody:
      description: "a new category is created"
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CategoryPost"
      responses:
        201:
          $ref: "#/components/responses/categoryCreatedSuccessfully"

        422:
          $ref: "#/components/responses/categoryCreateValidationError"

        500:
          $ref: "#/components/responses/categoryServerError"
  # GET
  # dot is here because keys must be unique.
  ./categories:
    get:
      tags:
        - Categories
      summary: "will return a list of existing categories"
      description: "service to retrive all registered caterogies"
      responses:
        200:
          $ref: "#/components/responses/getAllCategories"
        204:
          $ref: "#/components/responses/categoryCreateValidationError"
        500:
          $ref: "#/components/responses/categoryServerError"
  # PUT
  /categories/:id:
    put:
      tags:
        - Categories
      summary: "update an existing category by provinding the correct id"
      description: "this endpoint is in charge of making an update of the selected category"
      parameters:
        name: id
        description: "the id of the category that needs to be updated"
        required: true
        schema:
          type: integer
          example: 5
      requestBody:
        description: "category update"
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/CategoryUpdate"
      responses:
        200:
          $ref: "#/components/responses/updatedSuccessfully"

        404:
          $ref: "#/components/responses/updateCategoryNotFound"

        500:
          $ref: "#/components/responses/updateServerError"
  # GET
  /categories/{:id}:
    get:
      tags:
        - Categories
      summary: "Returns the category that corresponds with the selected id"
      description: "This endpoing will return the category that corresponds with the choosen id"
      parameters:
        name: id
        description: "the id of the category you want to see"
        required: true
        schema:
          type: integer
          example: 3
      responses:
        200:
          $ref: "#/components/responses/getCategoryById"
        404:
          $ref: "#/components/responses/nonExistingCategoryById"
        500:
          $ref: "#/components/responses/categoryByIdServerError"
  # DELETE
  # dot is here because keys must be unique.
  ./categories/:id:
    delete:
      tags:
        - Categories
      description: "This endpoing will delete the category that corresponds with the choosen id"
      parameters:
        name: id
        description: "the id of the category you want to delete"
        required: true
        schema:
          type: integer
          example: 6

      responses:
        200:
          $ref: "#/components/responses/deletedSuccessfully"

        404:
          $ref: "#/components/responses/deletedCategoryNotFound"

        500:
          $ref: "#/components/responses/deletedServerError"

components:
  # SCHEMAS
  schemas:
    CategoryPost:
      type: object
      properties:
        name:
          description: "name of the category"
          type: string
          example: "recreation"
        description:
          description: "description of the category"
          type: string
          example: "playing games at the park"
        image:
          description: "image that represent the category"
          type: string
          example: "https://ecologiahoy.net/wp-conte/uploads/2020/02/paisajes-natutrales-ecologiaverde-1.jpg"
    CategoryUpdate:
      type: object
      properties:
        name:
          description: "name of the category"
          type: string
          example: category one
        description:
          description: "description of the category"
          type: string
          example: "help others by teaching what you know"
        image:
          description: "image that represent the category"
          type: string
          example: "https://www.lluiscodina.com/wp-content/uploads/2019/05/navegacion-taxonomias-sitio-web.png"
    Category:
      required: id
      type: object
      properties:
        name:
          description: "name of the category"
          type: string
          example: "recreation"
        description:
          description: "category description"
          type: "string"
          image: "https://ecologiahoy.net/wp-content/uploads/2020/02/paisajes-natutrales-ecologiaverde-1.jp"
        deletedAt:
          description: "date the category was deleted"
          type: date
          example: "2021-08-09"
        createdAt:
          description: "date the category was created"
          type: date
          example: "2020-10-10"
        updatedAt:
          description: "date the category was updated"
          type: date
          example: "2021-11-11"
    RequestError:
      type: object
      properties:
        code:
          description: "error code"
          type: integer
          example: "Validation Errors: Invalid id"
    ErrorDB:
      type: object,
      properties:
        code:
          description: "error code"
          type: integer
          example: 500
        message:
          description: "error message"
          type: string
          example: "Internal Server Error"

  # Responses

  responses:
    # Verb POST ( Category - responses )
    categoryCreatedSuccessfully:
      description: "category created succesfully"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Created recreation category"
              category:
                type: object
                example:
                  $ref: "#/components/examples/categoryCreated"

    categoryCreateValidationError:
      description: "Validation errors"
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  properties:
                    value:
                      type: string
                      example: "12345"
                    msg:
                      type: string
                      example: "The value should be type string"
                    param:
                      type: string
                      example: "name"
                    location:
                      type: string
                      example: "body"

    categoryServerError:
      description: "Server error"
      example: { messege: ...error }
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "...error"

      # Verb get ( Category - responses )
    getAllCategories:
      description: "it shows a list with all the categories"
      content:
        application/json:
          schema:
            type: object
            properties:
              ok:
                type: boolean
                example: true
              count:
                type: integer
                example: "3"
              categories:
                type: array
                example:
                  $ref: "#/components/examples/getAllCategories"
                  items:
                    properties:
                      name:
                        type: string
                        example: "recreation"
    # Verb put ( Category - responses )
    updatedSuccessfully:
      description: updated succesfully
      example:
        $ref: "#/components/examples/categoryUpdated"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Category updated"
              category:
                type: object
                properties:
                  id:
                    type: integer
                    example: 5
                  name:
                    type: string
                    example: "recreation"
                  description:
                    type: string
                    example: "come and play with the kids"
                  image:
                    type: string
                    example: "https://www.lluiscodina.com/wp-content/uploads/2019/05/navegacion-taxonomias-sitio-web.png"
    updateCategoryNotFound:
      description: "Category not found"
      content:
        application/json:
          chema:
            type: object
            properties:
              messege:
                type: string
                example: "Category not found"
    updateServerError:
      description: "Server error"
      example: { messege: ...error }
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "...error"
    # Verb get ( CategorybyId - responses )
    getCategoryById:
      description: "an array with the chosen category"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Category"

    nonExistingCategoryById:
      description: "error message in JSON"
      content:
        application/json:
          schema:
            type: object
            $ref: "#/components/schemas/RequestError"

    categoryByIdServerError:
      description: "error message in JSON"
      content:
        application/json:
          schema:
            type: object
            $ref: "#/components/schemas/ErrorDB"

    # Verb DELETE ( Category deleted - responses )
    deletedSuccessfully:
      description: "deleted succesfully"
      content:
        application/json:
          schema:
            type: object
            example: "{del: true, messege: category with id 3, was deleted successfully}"
          properties:
            del:
              type: boolean
              example: true
            message:
              type: string
              example: "category with id 3, was deleted successfully"
    deletedCategoryNotFound:
      description: "category not found"
      content:
        application/json:
          schema:
            type: object
            properties:
              del:
                type: boolean
                example: false
              messege: string
              example: "the id 4 does not correspond to any category"
    deletedServerError:
      description: "category not found"
      content:
        application/json:
          schema:
            type: object
            properties:
              del:
                type: boolean
                example: false
              data:
                type: object

    # Examples responses
  examples:
    categoryCreated: { "ok": "true", "msg": "Created recreation category" }
    getAllCategories:
      {
        "ok": "true",
        "count": "2",
        "categories": [{ "name": "recreation" }, { "name": "donations" }],
      }
    categoryUpdated:
      {
        "message": "Category updated",
        "category":
          {
            "name": "art time",
            "description": "collaborate with our art program",
            "image": "https://www.lluiscodina.com/wp-content/uploads/2019/05/navegacion-taxonomias-sitio-web.png ",
          },
      }
